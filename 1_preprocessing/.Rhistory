demo()
demo(plotmath)
contour(volcano)
elevation<-matrix(1,100,100)
elevation[4,6:10]<-0
contour(elevation)
persp(elevation)
persp(elevation, expand=0.2)
contour(volcano)
volcano
persp(volcano)
persp(volcano, expand=0.2)
image(volcano)
help(image)
image(volcano, rainbow)
image(volcano)
help(seq)
pwm<-c(seq.int(25,250,25))
plot(voltage, current2)
current2 <- c(0.33, 0.66, 0.98, 1.30, 1.62, 1.94, 2.26, 2.59, 2.91)
plot(voltage, current2)
source('~/Desktop/Electronics:Computers/R/test arduino pwm vs voltage.R')
source('~/Desktop/Electronics:Computers/R/test arduino pwm vs voltage.R')
source('~/Desktop/Electronics:Computers/R/test arduino pwm vs voltage.R')
install.packages("swirl")
library("swirl")
swirl
swirl()
5+&
5+7
bye()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
cd rstats
dir.create(rstats)
dir.create?
dir.create(tesdir)
dir.create('testdir')
setwd('testdir')
file.create(mytest.R)
file.create('mytest.R')
ls
list.files
list.files()
file.exists?
help(file.exists)
file.exists("mytest.R")
help(file.info)
file.info("mytest.R")
file.rename?
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1", "folder2")
?dir.create
?
dir.create("testdir2")
dir.create(file.path('tesdir2', 'testdir3'), recursive = TRUE)
info()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
file.path(getwd())
play()
file.path((getwd()))
setwd('..')
getwd()
?unlink()
nxt()
setwd(/Users/Robert)
setwd('/Users/Robert')
setwd(old.dir)
unlink('testdir', recursive = TRUE)
swirl()
swirl()
load.packages
library("swirl")
ls
ls()
rm(list = ls())
ls
ls()
swirl()
1:20
pi:10
15:1
?
?':'
?seq
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length = 30)
my_seq <- seq(5,19, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
?rep
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- (num_vect < 1)
tf <- num_vect < 1
print(tf)
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
play()
?paste
nxt()
my_name <- c(my_char, "Robert")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
swirlstats()
library("swirl")
swirl()
c(0.5,55-10,6)
quit
quit()
bye()
swirl()
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pw
pwd
cd
ls
getwd
getwd()
setwd("~/Desktop/Comsci/machine_learning/Udemy_ML/1_preprocessing")
rm(list =ls()
dataset = read.csv('Data.csv')
rm(list =ls())
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
ds = read.csv('Data.csv')
ds$Age = ifelse(
is.na(ds$Age),
ave(dsa$Age, FUN = function(x) mean(x, na.rm = TRUE)),
ds$Age
)
ds$Age = ifelse(
is.na(ds$Age),
ave(ds$Age, FUN = function(x) mean(x, na.rm = TRUE)),
ds$Age
)
View(ds)
View(ds)
ds$Salary = ifelse(
is.na(ds$Salary),
ave(ds$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
ds$Salary
)
ds$Country = factor(
ds$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
ds$Purchased = factor(
ds$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1)
)
install.packages('catools')
install.packages('caTools')
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(ds$Purchased, SplitRatio = .8)
training_set = subset(ds, split == TRUE)
testing_set = subset(ds, split == FALSE)
View(testing_set)
View(training_set)
training_set = scale(training_set)
training_set = scale(training_set[2:3])
training_set[2:3] = scale(training_set[2:3])
source('~/Desktop/Comsci/machine_learning/Udemy_ML/1_preprocessing/preprocessing.r', echo=TRUE)
testing_set[2:3] = scale(testing_set[2:3])
source('~/Desktop/Comsci/machine_learning/Udemy_ML/1_preprocessing/preprocessing.r', echo=TRUE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
IRkernel::installspec(user = FALSE)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
